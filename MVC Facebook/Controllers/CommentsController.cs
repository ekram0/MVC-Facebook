using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Claims;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Mvc.Rendering;
using Microsoft.EntityFrameworkCore;
using MVC_Facebook.Data;
using MVC_Facebook.Models;
using MVC_Facebook.Models.Repository;

namespace MVC_Facebook.Controllers
{
    [Authorize(Roles = "Normal User")]

    public class CommentsController : Controller
    {
        private readonly IRepository<Comment, int> _commentRepository;

        public CommentsController(IRepository<Comment, int> commentRepository)
        {
            _commentRepository = commentRepository;
        }

        public IQueryable<Comment> GetPostComments(int postId)
        {
            return _commentRepository.GetAll().Where(c => c.PostID == postId).Include(p=>p.CommentOwner);
        }
        [HttpGet]
        public IActionResult showCommentPost(int id)
        {
            List<Comment> comments = GetPostComments(id).ToList();
            return PartialView(comments);

        }

        public JsonResult AddComment([Bind("ID,Body,PostID,CommentOwnerID,IsDeleted")] Comment com)
        {
            string CurrentUserID = this.User.FindFirstValue(ClaimTypes.NameIdentifier);
            com.CommentOwnerID = CurrentUserID;
            _commentRepository.Add(com);
            return Json(com.PostID);
        }
        
        public JsonResult Delete(int id)
        {
            if (id == null)
            {
                return Json("");
            }
            Comment comment = _commentRepository.GetById(id);
            if (comment == null)
            {
                return Json("");
            }
            comment = _commentRepository.Delete(id);
            return Json(comment.PostID);
        }


        #region CRUD AutoGenerated
        /*
        // GET: Comments
        public async Task<IActionResult> Index()
        {
            var applicationDbContext = _context.Comments.Include(c => c.CommentOwner).Include(c => c.Post);
            return View(await applicationDbContext.ToListAsync());
        }

        // GET: Comments/Details/5
        public async Task<IActionResult> Details(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var comment = await _context.Comments
                .Include(c => c.CommentOwner)
                .Include(c => c.Post)
                .FirstOrDefaultAsync(m => m.ID == id);
            if (comment == null)
            {
                return NotFound();
            }

            return View(comment);
        }

        // GET: Comments/Create
        public IActionResult Create()
        {
            ViewData["CommentOwnerID"] = new SelectList(_context.Users, "Id", "Id");
            ViewData["PostID"] = new SelectList(_context.Posts, "ID", "ID");
            return View();
        }

        // POST: Comments/Create
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        // more details see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Create([Bind("ID,CommentOwnerID,PostID,Body,IsDeleted,TimeStamp")] Comment comment)
        {
            if (ModelState.IsValid)
            {
                _context.Add(comment);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }
            ViewData["CommentOwnerID"] = new SelectList(_context.Users, "Id", "Id", comment.CommentOwnerID);
            ViewData["PostID"] = new SelectList(_context.Posts, "ID", "ID", comment.PostID);
            return View(comment);
        }

        // GET: Comments/Edit/5
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var comment = await _context.Comments.FindAsync(id);
            if (comment == null)
            {
                return NotFound();
            }
            ViewData["CommentOwnerID"] = new SelectList(_context.Users, "Id", "Id", comment.CommentOwnerID);
            ViewData["PostID"] = new SelectList(_context.Posts, "ID", "ID", comment.PostID);
            return View(comment);
        }

        // POST: Comments/Edit/5
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        // more details see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> Edit(int id, [Bind("ID,CommentOwnerID,PostID,Body,IsDeleted,TimeStamp")] Comment comment)
        {
            if (id != comment.ID)
            {
                return NotFound();
            }

            if (ModelState.IsValid)
            {
                try
                {
                    _context.Update(comment);
                    await _context.SaveChangesAsync();
                }
                catch (DbUpdateConcurrencyException)
                {
                    if (!CommentExists(comment.ID))
                    {
                        return NotFound();
                    }
                    else
                    {
                        throw;
                    }
                }
                return RedirectToAction(nameof(Index));
            }
            ViewData["CommentOwnerID"] = new SelectList(_context.Users, "Id", "Id", comment.CommentOwnerID);
            ViewData["PostID"] = new SelectList(_context.Posts, "ID", "ID", comment.PostID);
            return View(comment);
        }

        // GET: Comments/Delete/5
        public async Task<IActionResult> Delete(int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var comment = await _context.Comments
                .Include(c => c.CommentOwner)
                .Include(c => c.Post)
                .FirstOrDefaultAsync(m => m.ID == id);
            if (comment == null)
            {
                return NotFound();
            }

            return View(comment);
        }

        // POST: Comments/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            var comment = await _context.Comments.FindAsync(id);
            _context.Comments.Remove(comment);
            await _context.SaveChangesAsync();
            return RedirectToAction(nameof(Index));
        }

        private bool CommentExists(int id)
        {
            return _context.Comments.Any(e => e.ID == id);
        } 
    */
        #endregion
    }
}
